// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: litefs_entry.sql

package db

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :exec
INSERT INTO litefs_entry (id, parent_id, name, modtime, content)
VALUES ($1, $2, $3, $4, $5)
`

type CreateEntryParams struct {
	ID       string         `json:"id"`
	ParentID sql.NullString `json:"parentID"`
	Name     string         `json:"name"`
	Modtime  string         `json:"modtime"`
	Content  []byte         `json:"content"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.exec(ctx, q.createEntryStmt, createEntry,
		arg.ID,
		arg.ParentID,
		arg.Name,
		arg.Modtime,
		arg.Content,
	)
	return err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM litefs_entry
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteEntryStmt, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, parent_id, name, modtime, content
FROM litefs_entry
WHERE id = $1
`

func (q *Queries) GetEntry(ctx context.Context, id string) (LiteFSEntry, error) {
	row := q.queryRow(ctx, q.getEntryStmt, getEntry, id)
	var i LiteFSEntry
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Modtime,
		&i.Content,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, parent_id, name, modtime, content
FROM litefs_entry
WHERE parent_id = $1
`

func (q *Queries) ListEntries(ctx context.Context, parentID sql.NullString) ([]LiteFSEntry, error) {
	rows, err := q.query(ctx, q.listEntriesStmt, listEntries, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LiteFSEntry
	for rows.Next() {
		var i LiteFSEntry
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.Modtime,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRootEntries = `-- name: ListRootEntries :many
SELECT id, parent_id, name, modtime, content
FROM litefs_entry
WHERE parent_id IS NULL
`

func (q *Queries) ListRootEntries(ctx context.Context) ([]LiteFSEntry, error) {
	rows, err := q.query(ctx, q.listRootEntriesStmt, listRootEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LiteFSEntry
	for rows.Next() {
		var i LiteFSEntry
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.Modtime,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lookupEntry = `-- name: LookupEntry :one
SELECT id, parent_id, name, modtime, content
FROM litefs_entry
WHERE parent_id = $1 AND name = $2
`

type LookupEntryParams struct {
	ParentID sql.NullString `json:"parentID"`
	Name     string         `json:"name"`
}

func (q *Queries) LookupEntry(ctx context.Context, arg LookupEntryParams) (LiteFSEntry, error) {
	row := q.queryRow(ctx, q.lookupEntryStmt, lookupEntry, arg.ParentID, arg.Name)
	var i LiteFSEntry
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Modtime,
		&i.Content,
	)
	return i, err
}

const lookupRootEntry = `-- name: LookupRootEntry :one
SELECT id, parent_id, name, modtime, content
FROM litefs_entry
WHERE parent_id IS NULL AND name = $1
`

func (q *Queries) LookupRootEntry(ctx context.Context, name string) (LiteFSEntry, error) {
	row := q.queryRow(ctx, q.lookupRootEntryStmt, lookupRootEntry, name)
	var i LiteFSEntry
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Modtime,
		&i.Content,
	)
	return i, err
}

const renameEntry = `-- name: RenameEntry :exec
UPDATE litefs_entry
SET modtime = $2, name = $3
WHERE id = $1
`

type RenameEntryParams struct {
	ID      string `json:"id"`
	Modtime string `json:"modtime"`
	Name    string `json:"name"`
}

func (q *Queries) RenameEntry(ctx context.Context, arg RenameEntryParams) error {
	_, err := q.exec(ctx, q.renameEntryStmt, renameEntry, arg.ID, arg.Modtime, arg.Name)
	return err
}

const updateEntryBlob = `-- name: UpdateEntryBlob :exec
UPDATE litefs_entry
SET modtime = $2, content = $3
WHERE id = $1
`

type UpdateEntryBlobParams struct {
	ID      string `json:"id"`
	Modtime string `json:"modtime"`
	Content []byte `json:"content"`
}

func (q *Queries) UpdateEntryBlob(ctx context.Context, arg UpdateEntryBlobParams) error {
	_, err := q.exec(ctx, q.updateEntryBlobStmt, updateEntryBlob, arg.ID, arg.Modtime, arg.Content)
	return err
}
